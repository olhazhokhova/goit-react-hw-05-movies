{"version":3,"file":"static/js/935.d1fe231e.chunk.js","mappings":"mLACA,EAAyB,uB,SCazB,EAXe,WACX,OACI,gBAAKA,UAAWC,EAAhB,UACI,SAAC,KAAD,CAAWC,OAAO,KACdC,MAAM,KACNC,MAAM,UACNC,eAAe,kB,yGCR/B,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA2F,2BAA3F,EAAiI,6BAAjI,EAAqK,yBAArK,EAAyM,6B,2BC2DzM,EAtDmB,WAEf,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAQJ,EAAaK,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACNR,GAAY,GACZM,IAASG,EAAAA,EAAAA,IAAmBH,GAAOI,MAAK,SAAAC,GACpCf,EAAUe,EAAKC,SACQ,IAAvBD,EAAKE,eAAuBb,GAAY,MACzCc,SAAQ,WACPhB,GAAa,QAElB,CAACQ,IAQJ,OACI,iCACI,kBAAMlB,UAAWC,EAAQ0B,SARhB,SAACC,GACdA,EAAEC,iBACFnB,GAAa,GACbK,EAAgB,CAAEG,MAAOU,EAAEE,cAAcC,SAASb,MAAMc,SAKpD,WACI,kBAAOC,KAAK,OAAOjC,UAAWC,EAASiC,KAAK,WAC5C,mBAAQlC,UAAWC,EAAnB,uBAEHQ,IAAa,SAAC0B,EAAA,EAAD,KACZ1B,GAAaF,EAAO6B,OAAS,IAC3B,eAAIpC,UAAWC,EAAf,SAEQM,EAAO8B,KAAI,YAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cACpB,OACI,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAM3B,GAAWhB,UAAWC,EAAhE,SAA2EsC,GAAgBC,KADtFF,SASxB7B,GAAaE,IAAa,iBAAKX,UAAWC,EAAhB,+BAA+Ca,EAAaK,IAAI,SAAhE,qB,qJCrD3C,IAAMyB,EAAW,gCACXC,EAAU,mCAEhB,SAASC,IACP,OAAOC,MAAM,GAAD,OAAIH,EAAJ,oCAAwCC,IAAWvB,MAAK,SAAA0B,GAClE,GAAIA,EAAIC,GACN,OAAOD,EAAIE,UAKjB,SAASC,EAAeb,GACtB,OAAOS,MAAM,GAAD,OAAIH,EAAJ,iBAAqBN,EAArB,oBAAmCO,EAAnC,oBAA6DvB,MACvE,SAAA0B,GACE,GAAIA,EAAIC,GACN,OAAOD,EAAIE,UAMnB,SAAS7B,EAAmBH,GAC1B,OAAO6B,MAAM,GAAD,OACPH,EADO,iCAC0BC,EAD1B,kBAC2C3B,EAD3C,2BAEVI,MAAK,SAAA0B,GACL,GAAIA,EAAIC,GACN,OAAOD,EAAIE,UAKjB,SAASE,EAAed,GACtB,OAAOS,MAAM,GAAD,OACPH,EADO,iBACUN,EADV,4BACgCO,EADhC,oBAEVvB,MAAK,SAAA0B,GACL,GAAIA,EAAIC,GACN,OAAOD,EAAIE,UAKjB,SAASG,EAAkBf,GACzB,OAAOS,MAAM,GAAD,OACPH,EADO,iBACUN,EADV,4BACgCO,EADhC,oBAEVvB,MAAK,SAAA0B,GACL,GAAIA,EAAIC,GACN,OAAOD,EAAIE","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesPage/MoviesPage.module.css?564c","components/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import { ThreeDots } from  'react-loader-spinner'\nimport s from './Loader.module.css';\n\nconst Loader = () => { \n    return (\n        <div className={s.loader}>\n            <ThreeDots heigth=\"80\"\n                width=\"80\"\n                color='#3f51b5'\n                secondaryColor=\"lightGrey\" />\n        </div>\n        )\n}\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"MoviesPage_form__Hzb4A\",\"input\":\"MoviesPage_input__h5lTQ\",\"button\":\"MoviesPage_button__HN2QC\",\"unstyled\":\"MoviesPage_unstyled__iyR+l\",\"link\":\"MoviesPage_link__Kqtq6\",\"notFound\":\"MoviesPage_notFound__LX41k\"};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport s from './MoviesPage.module.css';\nimport { fetchMoviesByQuery } from '../../services/api';\nimport Loader from '../Loader';\n\nconst MoviesPage = () => {\n\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        setNotFound(false);\n        query && fetchMoviesByQuery(query).then(data => {\n            setMovies(data.results);\n            data.total_results === 0 && setNotFound(true);\n        }).finally(() => {\n            setIsLoading(false);\n        })\n    }, [query])\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setSearchParams({ query: e.currentTarget.elements.query.value });\n    }\n\n    return (\n        <>\n            <form className={s.form} onSubmit={onSubmit}>\n                <input type=\"text\" className={s.input} name=\"query\" />\n                <button className={s.button}>Search</button>\n            </form>\n            {isLoading && <Loader />}\n            {!isLoading && movies.length > 0 &&\n                <ul className={s.unstyled}>\n                    {\n                        movies.map(({id, title, original_name}) => {\n                            return (\n                                <li key={id}>\n                                    <Link to={`/movies/${id}`} state={{ from: location}} className={s.link} >{ title ? title : original_name }</Link>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            }\n            {\n                !isLoading && notFound &&  <div className={s.notFound}>Movies with query {searchParams.get('query')} not found</div>\n            }\n            \n        </>\n    )\n}\n\nexport default MoviesPage;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'adf034e2dfe8e0fada717e58b9449dc8';\n\nfunction fetchTrendingFilms() {\n  return fetch(`${BASE_URL}trending/all/day?api_key=${API_KEY}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n}\n\nfunction fetchMovieById(id) {\n  return fetch(`${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`).then(\n    res => {\n      if (res.ok) {\n        return res.json();\n      }\n    },\n  );\n}\n\nfunction fetchMoviesByQuery(query) {\n  return fetch(\n    `${BASE_URL}search/movie/?api_key=${API_KEY}&query=${query}&language=en-US&page=1`,\n  ).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n}\n\nfunction fetchMovieCast(id) {\n  return fetch(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`,\n  ).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n}\n\nfunction fetchMovieReviews(id) {\n  return fetch(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`,\n  ).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n}\n\nexport {\n  fetchTrendingFilms,\n  fetchMovieById,\n  fetchMoviesByQuery,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n"],"names":["className","s","heigth","width","color","secondaryColor","useState","movies","setMovies","isLoading","setIsLoading","notFound","setNotFound","useSearchParams","searchParams","setSearchParams","location","useLocation","query","get","useEffect","fetchMoviesByQuery","then","data","results","total_results","finally","onSubmit","e","preventDefault","currentTarget","elements","value","type","name","Loader","length","map","id","title","original_name","to","state","from","BASE_URL","API_KEY","fetchTrendingFilms","fetch","res","ok","json","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}